plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'org.springframework.boot' version '3.2.2'
}

group = 'com.java'
version = '1.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven")
    }
    maven {
        url = uri("https://maven.pkg.github.com/sathwickreddyy/java-personal-library")
        credentials {
            username = 'sathwickreddyy'
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    implementation 'org.springframework:spring-context:6.1.14'
    implementation 'org.springframework.integration:spring-integration-core:6.2.2'
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.2.2')
    implementation 'org.springframework.boot:spring-boot-starter'
    // other dependencies you need
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // lombok
    implementation 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // SLF4J API (Logging Facade)
    implementation 'org.slf4j:slf4j-api:2.0.9'
    // Logback (Actual Logging Implementation)
    implementation 'ch.qos.logback:logback-classic:1.4.14'

    // redis
    implementation 'redis.clients:jedis:3.7.0'

    implementation 'org.apache.commons:commons-math3:3.6.1'

    // personal libraries
    implementation 'com.java:personal-library:0.1.1'

//    // google pubsub
//    implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub:4.9.2'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka:3.1.1'
    implementation 'org.apache.kafka:kafka-clients:3.7.1'
    implementation 'com.google.protobuf:protobuf-java:4.28.2'
    implementation 'io.confluent:kafka-protobuf-serializer:7.5.0'
}

test {
    useJUnitPlatform()
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}

// Specify proto source directory inside sourceSets block
sourceSets {
    main {
        proto {
            srcDir 'src/main/resources/proto'
        }
    }
}
